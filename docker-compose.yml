version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-net

  kafka:
    image: bitnami/kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - kafka-net

  redis:
    image: redis:6.2
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kafka-net

  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka-net

  mongo-express:
    image: mongo-express:1.0.0
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - kafka-net

  service-registry:
    image: openjdk:17
    container_name: service-registry
    ports:
      - "8761:8761"
    volumes:
      - ./service-registry:/app
    working_dir: /app
    command: ["java", "-jar", "service-registry.jar"]
    networks:
      - kafka-net

  ticket-processing-service:
    image: openjdk:17
    container_name: ticket-processing-service
    ports:
      - "8082:8082"
    volumes:
      - ./ticket-processing-service:/app
    working_dir: /app
    command: ["java", "-jar", "ticket-processing-service.jar"]
    depends_on:
      - kafka
      - redis
      - mongo
      - service-registry
    networks:
      - kafka-net

  ticket-service:
    image: openjdk:17
    container_name: ticket-service
    ports:
      - "8089:8089"
    volumes:
      - ./ticket-service:/app
    working_dir: /app
    command: ["java", "-jar", "ticket-service.jar"]
    depends_on:
      - kafka
      - service-registry
    networks:
      - kafka-net

  notification-service:
    image: openjdk:17
    container_name: notification-service
    ports:
      - "8083:8083"
    volumes:
      - ./notification-service:/app
    working_dir: /app
    command: ["java", "-jar", "notification-service.jar"]
    depends_on:
      - kafka
      - service-registry
    networks:
      - kafka-net

  gatewayapi:
    image: openjdk:17
    container_name: gatewayapi
    ports:
      - "8080:8080"
    volumes:
      - ./gatewayapi:/app
    working_dir: /app
    command: ["java", "-jar", "gatewayapi.jar"]
    depends_on:
      - service-registry
    networks:
      - kafka-net

volumes:
  redis_data:
  mongo_data:

networks:
  kafka-net:
    driver: bridge
